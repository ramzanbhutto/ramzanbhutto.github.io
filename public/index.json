[{"content":"🔹 What is Doxygen? Doxygen is a documentation generator tool that:\nParses your code (C++, Python, Java, JavaScript, and many other languages). Extracts specially formatted comments. Automatically generates documentation in multiple formats: HTML (viewable in any browser) PDF / LaTeX Man pages Graphs and diagrams (with Graphviz) It’s like having a personal technical writer who works directly from your source code.\n🔹 What is a Doxyfile? The Doxyfile is the configuration file Doxygen uses to determine:\nWhich files to document Which languages to parse Whether to generate graphs or UML diagrams What output format to use (HTML, PDF, etc.) You can generate a default Doxyfile with:\ndoxygen -g This creates a Doxyfile in your current directory, which you can then edit to customize your documentation.\n🔹 Why Use PlantUML and Graphviz with Doxygen? While Doxygen can generate basic diagrams, integrating PlantUML and Graphviz allows you to create more complex and visually appealing diagrams.\nPlantUML lets you create UML diagrams using a simple text-based syntax. Graphviz generates graphs and diagrams from DOT files, which Doxygen can produce. This combination enhances your documentation with: Class diagrams Sequence diagrams State diagrams Call graphs Collaboration diagrams 🔹 Installing Doxygen, PlantUML and Graphviz Step 1: Install doxygen Ubuntu sudo apt-get install doxygen Arch Linux sudo pacman -S doxygen Step 2: Install Graphviz Ubuntu sudo apt-get install graphviz Arch Linux sudo pacman -S graphviz Step 3: Install PlantUML PlantUML requires Java to run. Make sure you have Java installed, then install PlantUML:\nUbuntu sudo apt-get install plantuml Arch Linux sudo pacman -S plantuml 🔹 Why Write and Configure Your Own Doxyfile? When you run:\ndoxygen -g After running this, Doxygen generates a default Doxyfile with nearly 3000 lines of configuration.While it contains every possible option, it can be overwhelming and cluttered, especially for beginners. It includes many settings that you may never use, making it hard to find the options you actually need. By writing your own Doxyfile from scratch, you can:\nKeep it clean and simple: Only include the settings you actually need. Understand each option: Learn what each configuration does, making it easier to customize later. Tailor it to your project: Focus on the specific features and outputs that matter to you. 🔹 Understanding Doxyfile configuration Now, let’s go through each important section of a Doxyfile step-by-step. First, create a new file named Doxyfile in your project directory and open it in your favorite text editor.\n1. Project Information The first section defines basic metadata about your project.\nPROJECT_NAME = \u0026#34;MyProject\u0026#34; PROJECT_BRIEF = \u0026#34;A brief description of MyProject\u0026#34; PROJECT_LOGO = \u0026#34;path/to/logo.png\u0026#34; OUTPUT_DIRECTORY = docs PROJECT_NAME: The name of your project. PROJECT_BRIEF: A short description of your project. PROJECT_LOGO: Path to a logo image to include in the documentation. OUTPUT_DIRECTORY: Where the generated documentation will be saved. 2. Input Sources This section specifies which files and directories to include in the documentation.\nINPUT = . FILE_PATTERNS = *.cpp *.h *.py RECURSIVE = YES INPUT: The directories or files to scan for documentation. FILE_PATTERNS: File extensions as per language used in the project. RECURSIVE: If set to YES, Doxygen will search subdirectories. If NO, it will only scan the root directory. 3. Build Options This section controls how Doxygen processes the input files.\nEXTRACT_ALL = YES EXTRACT_PRIVATE = YES EXTRACT_STATIC = YES EXTRACT_LOCAL_CLASSES = YES EXTRACT_LOCAL_METHODS = YES EXTRACT_ALL: If YES, Doxygen will document all entities, even those without comments. EXTRACT_PRIVATE: If YES, private class members will be included in the documentation. EXTRACT_STATIC: If YES, static members will be documented. EXTRACT_LOCAL_CLASSES: If YES, local classes (defined within functions) will be documented. EXTRACT_LOCAL_METHODS: If YES, local methods (defined within functions) will be documented. 4. Output Formats This section specifies which output formats to generate.\nGENERATE_HTML = YES GENERATE_LATEX = NO GENERATE_HTML: If YES, Doxygen will generate HTML documentation. GENERATE_LATEX: If YES, Doxygen will generate LaTeX documentation (useful for creating PDFs). 5. Graphs and Diagrams This section enables the generation of graphs and diagrams using Graphviz and PlantUML.\nHAVE_DOT = YES DOT_PATH = DOT_IMAGE_FORMAT = svg CALL_GRAPH = YES CALLER_GRAPH = YES CLASS_DIAGRAMS = YES UML_LOOK = YES DOT_GRAPH_MAX_NODES = 50 INTERACTIVE_SVG = YES HAVE_DOT: If YES, enables Graphviz support for generating graphs. DOT_PATH: Path to the Graphviz dot executable (if not in your system PATH). DOT_IMAGE_FORMAT: The format for generated graph images (e.g., svg, png). CALL_GRAPH: If YES, generates call graphs for functions. CALLER_GRAPH: If YES, generates caller graphs for functions. CLASS_DIAGRAMS: If YES, generates class diagrams. UML_LOOK: If YES, uses a UML-like style for class diagrams. DOT_GRAPH_MAX_NODES: Limits the number of nodes in generated graphs to avoid clutter. INTERACTIVE_SVG: If YES, generates interactive SVG diagrams(zoomable and pannable). Tip : If your graphs are too cluttered, try reducing DOT_GRAPH_MAX_NODES or simplifying your code structure.\n6. PlantUML Integration To integrate PlantUML, you need to specify the path to the PlantUML jar file.\nPLANTUML_JAR_PATH = /path/to/plantuml.jar PLANTUML_JAR_PATH: Path to the PlantUML jar file. This allows Doxygen to generate UML diagrams using PlantUML. 7. Complete Doxyfile Example Here’s a complete example of a simple Doxyfile with the above configurations:\n# --- Project Information --- PROJECT_NAME = \u0026#34;MyProject\u0026#34; PROJECT_BRIEF = \u0026#34;A brief description of MyProject\u0026#34; PROJECT_LOGO = \u0026#34;path/to/logo.png\u0026#34; OUTPUT_DIRECTORY = docs # --- Input Sources --- INPUT = . FILE_PATTERNS = *.cpp *.h *.hpp *.py *.java *.js *.ts *.go *.cs RECURSIVE = YES # --- Build Options --- EXTRACT_ALL = YES EXTRACT_PRIVATE = YES EXTRACT_STATIC = YES EXTRACT_LOCAL_CLASSES = YES EXTRACT_LOCAL_METHODS = YES # --- Documentation Output --- GENERATE_HTML = YES GENERATE_LATEX = NO # --- Diagrams \u0026amp; Graphs --- HAVE_DOT = YES DOT_PATH = DOT_IMAGE_FORMAT = svg CALL_GRAPH = YES CALLER_GRAPH = YES CLASS_DIAGRAMS = YES UML_LOOK = YES DOT_GRAPH_MAX_NODES = 50 INTERACTIVE_SVG = YES # --- PlantUML Integration --- PLANTUML_JAR_PATH = /path/to/plantuml.jar 7. Running Doxygen Once your Doxyfile is configured, you can generate the documentation by running in your terminal:\ndoxygen Doxyfile Then, open the generated HTML documentation in your web browser:\nxdg-open docs/html/index.html # Linux open docs/html/index.html # macOS start docs\\html\\index.html # Windows It will open the main page of your generated documentation, there you can navigate through classes, files, and diagrams. Following is the sample output of the documentation: 🔹 How it works Below is a visual representation of how Doxygen, Graphviz, and PlantUML work together:\n🔹 Conclusion Using Doxygen with PlantUML and Graphviz allows you to create comprehensive, visually appealing documentation for your projects with minimal effort. By writing a clean and tailored Doxyfile, you can ensure that your documentation meets your specific needs and showcases your code effectively. It can save you time, improve code maintainability, and enhance collaboration within your team.\nIn short: Well-documented projects are easier to maintain, scale, and share.\nIf you want your code to speak for itself, Doxygen is one of the best investments you can make.\n🔹 Additional Resources Doxygen Official Documentation PlantUML Official Website Graphviz Official Website Happy Documenting! 🚀\n","permalink":"http://localhost:1313/posts/doxygen/","summary":"\u003ch2 id=\"-what-is-doxygen\"\u003e🔹 What is Doxygen?\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.doxygen.nl/\"\u003eDoxygen\u003c/a\u003e is a documentation generator tool that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eParses your code (C++, Python, Java, JavaScript, and many other languages).\u003c/li\u003e\n\u003cli\u003eExtracts specially formatted comments.\u003c/li\u003e\n\u003cli\u003eAutomatically generates documentation in multiple formats:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHTML\u003c/strong\u003e (viewable in any browser)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePDF / LaTeX\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMan pages\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGraphs and diagrams\u003c/strong\u003e (with Graphviz)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt’s like having a personal technical writer who works directly from your source code.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-what-is-a-doxyfile\"\u003e🔹 What is a Doxyfile?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eDoxyfile\u003c/code\u003e is the \u003cstrong\u003econfiguration file\u003c/strong\u003e Doxygen uses to determine:\u003c/p\u003e","title":"Doxygen + PlantUML + Graphviz: Build Automated, Beautiful Project Documentation"},{"content":" Part 1: Setting Up NVChad Note: I am using Arch Linux. So, use terminal commands as per your Distro.\nStep 1: Removing any previous configuration Linux/MacOS Users rm -rf ~/.config/nvim rm -rf ~/.local/state/nvim rm -rf ~/.local/share/nvim Flatpak(Linux) Users rm -rf ~/.var/app/io.neovim.nvim/config/nvim rm -rf ~/.var/app/io.neovim.nvim/data/nvim rm -rf ~/.var/app/io.neovim.nvim/.local/state/nvim Window Users CMD rd -r ~\\AppData\\Local\\nvim rd -r ~\\AppData\\Local\\nvim-data Powershell rm -Force ~\\AppData\\Local\\nvim rm -Force ~\\AppData\\Local\\nvim-data Step 2: Installing NVChad Clone the NVChad repository Linux/MacOS: git clone https://github.com/NvChad/starter ~/.config/nvim \u0026amp;\u0026amp; nvim Flatpak: git clone https://github.com/NvChad/starter ~/.var/app/io.neovim.nvim/config/nvim \u0026amp;\u0026amp; flatpak run io.neovim.nvim Windows (CMD): git clone https://github.com/NvChad/starter %USERPROFILE%\\AppData\\Local\\nvim \u0026amp;\u0026amp; nvim Windows (Powershell): git clone https://github.com/NvChad/starter $ENV:USERPROFILE\\AppData\\Local\\nvim \u0026amp;\u0026amp; nvim Step 3: Basic Neovim commands to attempt further processes Type nvim or neovim on the terminal before any file name(optional) to enter into neovim environment.\nEnter editing mode: i Escape the editing mode to save or exit: Press the escape button\nSave file: :w Exit with saving: :wq Exit without saving: :q! Step 4: Essential processes after installing Run following command into nvim after lazy.nvim finishes downloading plugins: :MasonInstallAll Navigate to nvim directory in .config folder to the remove .git folder. rm -rf /home/username/.config/nvim/.git Learn customization of UI and base46 by using following command inside nvim: :h nvui Update the packages: :Lazy sync Step 5: Setting up LSP Configurations You have to add required language server protocols to improve your coding experience.\nEnsure that lazy_config is set up correctly after vim.otp.rtp in the file home/username/.config/nvim/init.lua, if not, then add the following content to init.lua file after vim.otp.rtp: local lazy_config = require \u0026#34;configs.lazy\u0026#34; -- load plugins require(\u0026#34;lazy\u0026#34;).setup({ { \u0026#34;NvChad/NvChad\u0026#34;, lazy = false, branch = \u0026#34;v2.5\u0026#34;, import = \u0026#34;nvchad.plugins\u0026#34;, }, { import = \u0026#34;plugins\u0026#34;}, }, lazy_config) Before moving further make sure that you have installed npm server on your system. If not, then download it using: sudo pacman -S nodejs npm sudo npm install -g pyright For C/C++ and Python development, ensure clangd and pyright is installed and configured: Add the following piece of code to init.lua after the ending of above mentioned code: --clangd server setup local lspconfig = require(\u0026#39;lspconfig\u0026#39;) lspconfig.clangd.setup({ --For C/C++ cmd = { \u0026#34;clangd\u0026#34; }, -- Ensure this points to the system-installed clangd -- Additional configuration options can be added here }) lspconfig.pyright.setup({ --For Python autoSearchPaths = true, diagnosticMode = \u0026#34;workplace\u0026#34;, --you can also set it to \u0026#34;openFilesOnly\u0026#34; to check errors in only oepned files }) Edit lazy.lua file to enable plugins and comment the lines after disabled_plugins lines like mentioned below: Address: /home/username/.config/nvim/lua/configs/lazy.lua\nperformance = { rtp = { disabled_plugins = { --\u0026#34;2html_plugin\u0026#34;, --\u0026#34;tohtml\u0026#34;, --\u0026#34;getscript\u0026#34;, --\u0026#34;getscriptPlugin\u0026#34;, --\u0026#34;gzip\u0026#34;, --\u0026#34;logipat\u0026#34;, --\u0026#34;netrw\u0026#34;, --\u0026#34;netrwPlugin\u0026#34;, --\u0026#34;netrwSettings\u0026#34;, --\u0026#34;netrwFileHandlers\u0026#34;, --\u0026#34;matchit\u0026#34;, --\u0026#34;tar\u0026#34;, --\u0026#34;tarPlugin\u0026#34;, --\u0026#34;rrhelper\u0026#34;, --\u0026#34;spellfile_plugin\u0026#34;, --\u0026#34;vimball\u0026#34;, --\u0026#34;vimballPlugin\u0026#34;, --\u0026#34;zip\u0026#34;, --\u0026#34;zipPlugin\u0026#34;, --\u0026#34;tutor\u0026#34;, --\u0026#34;rplugin\u0026#34;, --\u0026#34;syntax\u0026#34;, --\u0026#34;synmenu\u0026#34;, --\u0026#34;optwin\u0026#34;, --\u0026#34;compiler\u0026#34;, --\u0026#34;bugreport\u0026#34;, --\u0026#34;ftplugin\u0026#34;, }, }, }, Open nvim and install lsp for any language, I am doing for C/C++ and Python: :MasonInstall clangd :MasonIntall python-lsp-server :MasonInstall pyright In MasonInstall menu, Press U to update and arrow key to scroll and find your required lsp\nUpdate packages using: :Lazy update :Lazy sync Part 2: Integrating ChatGPT into Neovim Step 1: Get the API Key Click here and Sign up or Login in for OPENAI Platform.\nClick on the setting ⚙️ option and Navigate to API keys.\nClick on + Create new secret key and fill some sections to generate your key.\nAfter generating, copy your key.\nStep 2: Save into your zsh or bash file Verify your terminal type by typing following command into your terminal: echo $0 if it indicates /bin/zsh or zsh then you\u0026rsquo;re a zsh terminal user, if it indicates /bin/bash or bash then you\u0026rsquo;re bash terminal user.\nIf you\u0026rsquo;re a zsh terminal user, open .zshrc file or if you\u0026rsquo;re a bash terminal user, open .bashrc file into your home directory and add the following lines: export OPENAI_API_KEY=\u0026#34;paste_your_api_key_here\u0026#34; Source the file after making changes and pasting your OPENAI_API_KEY key, by running following command into terminal: source .zshrc or\nsource .bashrc Verify your API key: echo $OPENAI_API_KEY Step 3: Configuring the init.lua file Address: /home/username/.config/nvim/init.lua\nLocate the following piece of code into init.lua file:\n{ \u0026#34;NvChad/NvChad\u0026#34;, lazy = false, branch = \u0026#34;v2.5\u0026#34;, import = \u0026#34;nvchad.plugins\u0026#34;, }, Then, add the following beautiful text just after it:\n{ \u0026#34;jackMort/ChatGPT.nvim\u0026#34;, event = \u0026#34;VeryLazy\u0026#34;, dependencies = { \u0026#34;MunifTanjim/nui.nvim\u0026#34;, \u0026#34;nvim-lua/plenary.nvim\u0026#34;, \u0026#34;nvim-telescope/telescope.nvim\u0026#34;, \u0026#34;folke/trouble.nvim\u0026#34;, }, config = function() require(\u0026#34;chatgpt\u0026#34;).setup({ -- Your ChatGPT.nvim configuration api_key_cmd = \u0026#34;echo $OPENAI_API_KEY\u0026#34;, vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-s\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua require(\u0026#39;chatgpt\u0026#39;).submit()\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true }),-- Submit text in the ChatGPT prompt vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-c\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua require(\u0026#39;chatgpt\u0026#39;).close()\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true }), -- Close ChatGPT window vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-y\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua require(\u0026#39;chatgpt\u0026#39;).yank_last()\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true }), -- Yank last ChatGPT response vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-u\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua require(\u0026#39;chatgpt\u0026#39;).scroll_up()\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true }), -- Scroll up vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-d\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua require(\u0026#39;chatgpt\u0026#39;).scroll_down()\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true }), -- Scroll down vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-e\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua vim.api.nvim_screenshot(\u0026#39;/home/ramzan/screenshot\u0026#39;)\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true}), vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-2\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua require(\u0026#39;chatgpt\u0026#39;).goto_next_end()\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true}), vim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-w\u0026gt;\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua require(\u0026#39;chatgpt\u0026#39;).close()\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true}) }) end, }, This will automatically set the keybindings which are essential to run ChatGPT into it. Save this file and exit.\nStep 4: Final setup Open Neovim and update the lazy package: :Lazy update :Lazy sync Shortcuts to run ChatGPT: Open Neovim Open ChatGPT menu: :ChatGPT It will open a menu inside our terminal, then give any command to it. Press Esc and then press enter to submit the command. Press Esc and then press ctrl+C or enter :q to exit ChatGPT. You can further learn neovim Shortcuts by: :h nvui That\u0026rsquo;s it. Finally the setup is over and chatgpt is working inside our terminal. If any issue persists like Incorrect OPENAI_API_KEY then you just have to source the bash or zsh file source .zshrc or source.bashrc. Happy coding 💟\n","permalink":"http://localhost:1313/posts/neovim-plugins/","summary":"\u003chr\u003e\n\u003ch2 id=\"part-1-setting-up-nvchad\"\u003ePart 1: Setting Up NVChad\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: I am using Arch Linux. So, use terminal commands as per your Distro.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"step-1-removing-any-previous-configuration\"\u003eStep 1: Removing any previous configuration\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eLinux/MacOS Users\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003erf \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003erf \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003elocal\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estate\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003erf \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003elocal\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eshare\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eFlatpak(Linux) Users\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003erf \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003evar\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eapp\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eneovim\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003envim\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003erf \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003evar\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eapp\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eneovim\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003envim\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003edata\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003erf \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003evar\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eapp\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eneovim\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003envim\u003cspan style=\"color:#f92672\"\u003e/.\u003c/span\u003elocal\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estate\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eWindow Users\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eCMD\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e rd \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003er \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e\\AppData\\Local\\nvim\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e rd \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003er \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e\\AppData\\Local\\nvim\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003edata\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003ePowershell\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eForce \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e\\AppData\\Local\\nvim\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eForce \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e\\AppData\\Local\\nvim\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003edata\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-2-installing-nvchad\"\u003eStep 2: Installing NVChad\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eClone the NVChad repository\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eLinux/MacOS:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  git clone https:\u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003egithub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecom\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eNvChad\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estarter \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nvim\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eFlatpak:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e git clone https:\u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003egithub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecom\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eNvChad\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estarter \u003cspan style=\"color:#f92672\"\u003e~/.\u003c/span\u003evar\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eapp\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eneovim\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003envim\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003envim \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e flatpak run io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eneovim\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003envim\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eWindows (CMD):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  git clone https:\u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003egithub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecom\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eNvChad\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estarter \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003eUSERPROFILE\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\\AppData\\Local\\nvim \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nvim\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eWindows (Powershell):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  git clone https:\u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003egithub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecom\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eNvChad\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estarter \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eENV:USERPROFILE\\AppData\\Local\\nvim \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nvim\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"step-3-basic-neovim-commands-to-attempt-further-processes\"\u003eStep 3: Basic Neovim commands to attempt further processes\u003c/h3\u003e\n\u003cp\u003eType \u003ccode\u003envim\u003c/code\u003e or \u003ccode\u003eneovim\u003c/code\u003e on the terminal before any file name(optional) to enter into neovim environment.\u003c/p\u003e","title":"Neovim Complete Setup and Integrating ChatGPT"},{"content":"Automatically Switching Audio Output Between Speakers and Headphones on Arch Linux: A Comprehensive Guide Method 1:Using Pavucontrol(Graphical Method) If you prefer a more user friendly environment, then go for pavucontrol.\nStep 1:Install pavucontrol if it\u0026rsquo;s not already installed: sudo pacman -S pavucontrol Step 2: Launch pavucontrol: pavucontrol Step 3: Navigate to the Configuration tab. In pavucontrol, go to the Configuration tab. This section allows you to manage audio profiles for your devices.\nStep 4: Select Profile Locate your sound card and ensure the profile is set to a mode that supports both speakers and headphones, such as Analog Stereo Duplex.\nStep 5: Access Output Devices. Navigate to the Output Devices tab to view all available audio outputs, such as speakers and headphones.\nStep 6: Choose Output Port In the Output Devices tab, select the desired output port (e.g., headphones) to direct audio accordingly.\nMethod 2: Using the Terminal (Command-Line Method): For those who prefer the command line, you can achieve automatic switching by following steps:\nStep 1: Ensure you have Pulseaudio or Pipewire installed, if not then achieve it using: sudo pacman -S pulseaudio or\nsudo pacman -S pipewire Step 2: Identify available audio sinks First, list all available audio sinks (output devices) to determine the identifiers for your loudspeaker and headphones:\npactl list short sinks Step 3: Set Default Sink to Headphones Once you have identified the sink name for your headphones(e.g, bluez_output.56_66_98_EX_56_9X.2), set it as default sink:\npactl set-default-sink bluez_output.56_66_98_EX_56_9X.2 Replace bluez_output.56_66_98_EX_56_9X.2 with the actual sink name of your headphones.\nStep 4: Move Existing Audio Streams: To redirect current audio streams to the newly selected default sink (headphones), execute the following script in terminal that will move all active sudio streams to the default sink you set in the previous step.\nfor stream in $(pactl list short sink-inputs | awk \u0026#39;{print $1}\u0026#39;); do pactl move-sink-input $stream $(pactl get-default-sink) done In conclusion, by leveraging PulseAudio\u0026rsquo;s command-line utilities, you can effectively manage audio streams on your Arch Linux system. The provided script automates the process of moving all active audio streams to the default sink, ensuring a seamless transition when switching output devices. This approach offers a streamlined and efficient method to control audio routing directly from the terminal, enhancing your overall user experience.\n","permalink":"http://localhost:1313/posts/auto-audio-switching/","summary":"\u003ch3 id=\"automatically-switching-audio-output-between-speakers-and-headphones-on-arch-linux-a-comprehensive-guide\"\u003eAutomatically Switching Audio Output Between Speakers and Headphones on Arch Linux: A Comprehensive Guide\u003c/h3\u003e\n\u003chr\u003e\n\u003ch2 id=\"method-1using-pavucontrolgraphical-method\"\u003eMethod 1:Using Pavucontrol(Graphical Method)\u003c/h2\u003e\n\u003cp\u003eIf you prefer a more user friendly environment, then go for pavucontrol.\u003c/p\u003e\n\u003ch3 id=\"step-1install-pavucontrol-if-its-not-already-installed\"\u003eStep 1:Install \u003cstrong\u003epavucontrol\u003c/strong\u003e if it\u0026rsquo;s not already installed:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-zsh\" data-lang=\"zsh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo pacman -S pavucontrol\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"step-2-launch-pavucontrol\"\u003eStep 2: Launch \u003cstrong\u003epavucontrol\u003c/strong\u003e:\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epavucontrol\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"step-3-navigate-to-the-configuration-tab\"\u003eStep 3: Navigate to the \u003ccode\u003eConfiguration\u003c/code\u003e tab.\u003c/h3\u003e\n\u003cp\u003eIn pavucontrol, go to the Configuration tab. This section allows you to manage audio profiles for your devices.\u003c/p\u003e","title":"Auto-Switch Audio in Arch Linux(LARBS): Speakers to Headphones"},{"content":"Building Linux Kernel The process of building a Linux Kernel can be performed in several steps, but it may take time as per your hardware capabilities.\nStep 1: Download the Source Code Visit the Official Kernel Website and download the latest kernel source code. The downloaded files contains a compressed source code that you need to extract it.\nStep 2: Extract the Source Code After downloading, it is necessary to extract the source code. So, we will achieve this using tar command.\ntar xvf linux-6.13.tar.xz If you don\u0026rsquo;t have tar, then download it using command:\nsudo pacman -S tar Note: It is recommended to download the latest kernel source code and write it\u0026rsquo;s version correctly while using tar command.\nStep 3: Install the Required Packages Make sure you have additional packages to start compilation. To achieve this, you need to install the following packages:\nsudo pacman -S git fakeroot ncurses xz bc flex bison base-devel kmod cpio perl binutils util-linux jfsutils e2fsprogs xfsprogs squashfs-tools quota-tools Step 4: Configure your kernel Navigate to linux-6.13 folder: cd linux-6.13 Configue your kernel. It is recommended to use your current system\u0026rsquo;s configuration as a base. So write the following commands in order: Use the following commad if you have zcat: zcat /proc/config.gz \u0026gt; .config Else you have to use following commands to simply copying config file: cp /proc/config.gz ./ gunzip ./config.gz mv config .config Use the following commands to open a menu-driven interface to customize kernel options:\nmake menuconfig make xconfig `make oldconfig` Make some changes in .config file:\nOpen it using command(you can use vim, kate, nano or any other text editor): sudo vim .config Make following changes:\nsearch for CONFIG_EXT4_FS=m and set it to CONFIG_EXT4_FS=y.\nStep 5: Start compilation Check for available processing CPU Cores using command: nproc Note then n number of cores shown on the screen\nInitiate the compilation process: make -jn Replace n with number of cores that you found using nproc command\nAnd now your Kernel starts compiling\nIf any issue persists during or after running make -jn, then make a back up of .config file and run the command:\nmake mrproper make mrproper resets your entire broken tree back to the initial state.\nStep 6: Install Modules Insalling Kernel Modules are mandatory and they enhances the kernel\u0026rsquo;s capabilities, hardware support and other features while maintaining system stability and efficiency. You can install kernel modules using commad:\nsudo make modules_install Step 7: Install Kernel The following are two different methods to install Kernel. Use the first method. If it doesn\u0026rsquo;t work, then use the second method carefully:\nDirectly install through one command: sudo make install Use three commands properly and carefully: Copy the Kernel Image: sudo cp arch/x86/boot/bzImage /boot/vmlinuz-linux-custom Copy the System.map file: sudo cp System.map /boot/System.map-linux-custom Copy the configuration file: sudo cp .config /boot/config-linux-custom Step 8: Update the Bootloader Depending on your bootloader, you will need to add an entry for the new kernel. I am adding entry for GRUB as I uses it.\nRun the following command to know the UUID of your root partition (it will be in ext4 file system and have the mounting point as /) and copy it: lsblk -f Open the file using command: sudo nvim /etc/grub.d/40_custom Add the following content to the above mentioned file at the end: menuentry \u0026#39;Custom Linux Kernel\u0026#39; { linux /boot/vmlinuz-linux-custom root=UUID=paste-your-root-partition-uuid-here initrd /boot/initramfs-linux.img } Step 9: Generate Initramfs Generating Initramfs is necessary as you have compiled a new custom kernel, installed kernel modules, updated kernel configuration and updated bootloader. It is crucial for boot system. Use the command and make sure to input the correct version as I mentioned 6.13:\nsudo mkinitcpio -k 6.13-custom -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-custom.img Step 10: Update GRUB configuration Use the following command to update it as it will detect our new custom kernel:\nsudo grub-mkconfig -o /boot/grub/grub.cfg That\u0026rsquo;s it. Configuration, you successfully build, compiled and installed your custom Kernel. Enjoy\n","permalink":"http://localhost:1313/posts/kernel-compilation/","summary":"\u003ch2 id=\"building-linux-kernel\"\u003eBuilding Linux Kernel\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eThe process of building a Linux Kernel can be performed in several steps, but it may take time as per your hardware capabilities.\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"step-1-download-the-source-code\"\u003eStep 1: Download the Source Code\u003c/h3\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://www.kernel.org/\"\u003eOfficial Kernel Website\u003c/a\u003e and download the latest kernel source code. The downloaded files contains a compressed source code that you need to extract it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"step-2-extract-the-source-code\"\u003eStep 2: Extract the Source Code\u003c/h3\u003e\n\u003cp\u003eAfter downloading, it is necessary to extract the source code. So, we will achieve this using \u003cstrong\u003etar\u003c/strong\u003e command.\u003c/p\u003e","title":"Compile and Build Linux Kernel"},{"content":"Understanding GRUB Rescue and How to Fix It (A Guide to Diagnosing and Resolving Boot Errors)\nIntroduction GRUB (Grand Unified Bootloader) is a critical component of Linux systems, responsible for loading the operating system. However, encountering the GRUB rescue prompt can be alarming. This blog explains why this happens and provides two practical methods to resolve it.\nWhy Does GRUB Rescue Appear? The GRUB rescue prompt appears when the bootloader fails to locate critical files or configurations. Common causes include:\nCorrupted or Broken GRUB Installation: Occurs after interrupted updates or failed OS installations. Incorrect Partition Changes: Modifying disk partitions (e.g., deleting/resizing) can break GRUB’s path. Missing OS or Boot Files: Accidental deletion of /boot or misconfigured kernel updates. Disk Errors: Hardware failures or filesystem corruption. Method 1: On-the-Spot Fix Using GRUB Rescue Commands If you have access to the GRUB rescue prompt, try these steps:\nStep 1: Identify Partitions List available partitions using:\nls Step 2: Locate the Boot Partition Check each partition for the /boot/grub directory:\nls (hdX,msdosY)/boot/grub Continue this process until you locate the /boot/grub directory. Then, replace X (disk number) and Y (partition number) based on your system.\nStep 3: Set the Correct Root and Prefix Set the correct root and prefix:\nset root=(hdX,msdosY) set prefix=(hdX,msdosY)/boot/grub Step 4: Load the Normal Modules insmod normal normal This should bring up the standard GRUB menu, allowing you to boot into your operating system.\nStep 5: Reinstall GRUB Once booted, it\u0026rsquo;s crucial to reinstall GRUB to prevent future issues:\nsudo grub-mkconfig -o /boot/grub/grub.cfg It generated grub configuration file for arch-based distros, for debian based distros, you can use the following command:\nsudo grub-update Now reinstall the GRUB Bootloader to the specified disk:\nsudo grub-install /dev/sdaX It is recommended to regenerate the grub configuration after this step.\nMethod 2: GRUB Setup using a Live USB This method involves booting into a Live USB environment, mounting the necessary partitions, and reinstalling GRUB manually. Follow these steps carefully:\nStep 1: Boot into Live USB Create a Live USB using tools like Rufus or BalenaEtcher. Boot into the Live environment by selecting the USB drive in your BIOS/UEFI menu. Step 2: Identify Partitions Use lsblk to list all disks and partitions:\nlsblk Step3: Mount the root partition Mounts the root partition (/dev/nvme0n1p4) to the /mnt directory. Replace /dev/nvme0n1p4 with your actual root partition identifier.\nsudo mount /dev/nvme0n1p4 /mnt Step 4: Mount the boot partition Mounts the boot partition (/dev/nvme0n1p3) to /mnt/boot. Adjust /dev/nvme0n1p3 to match your boot partition.\nsudo mount /dev/nvme0n1p3 /mnt/boot Step 5: Bind Mount System Directories Bind /dev, /proc, /sys, and EFI variables to the chroot environment:\ni: /dev directory Bind the /dev directory to /mnt/dev for device access in the chroot environment.\nsudo mount - -bind /dev /mnt/dev ii: /proc directory Bind the /proc directory to /mnt/proc for process information.\nsudo mount --bind /proc /mnt/proc iii: /sys directory Bind the /sys directory to /mnt/sys for system information.\nsudo mount - -bind /sys /mnt/sys iv: efi variables Binds EFI variables to /mnt/sys/firmware/efi/efivars for UEFI systems.\nsudo mount - -bind /sys/firmware/efi/efivars /mnt/sys/firmware/efi/efivars v: /dev/pts (optional for nvme or gpt file systems) If your system uses the pts filesystem or you want a pseudo-terminal support.\nsudo mount --bind /dev/pts /mnt/dev/pts Step 6: Chroot into the System Switches the root directory to /mnt, allowing you to work on the installed system. Enter the chroot environment:\nsudo chroot /mnt Step 7: Reinstall GRUB Install the GRUB bootloader for UEFI systems, specifying the target architecture, EFI directory, and a bootloader identifier.\nsudo grub-install - -target=x86_64-efi - -efi-directory=/boot/efi - -bootloader-id=GRUB Step 8: Generate GRUB Configuration file Generate a new GRUB configuration file, detecting available operating systems and kernels.\nsudo grub-mkconfig -o /boot/grub/grub.cfg Step 9: Exit chroot Environment Exits the chroot environment, returning to the Live USB session.\nexit Step 9: Unmount Filesystems Recursively unmounts all filesystems mounted under /mnt.\nsudo umount -R /mnt Step 10: Reboot the System Restarts the system. Remove the Live USB to boot into your repaired system.\nreboot Step 11: Regenerate GRUB Configuration File After booting into your system, it\u0026rsquo;s advisable to regenerate the GRUB configuration file to ensure all operating systems are detected:\nsudo grub-mkconfig -o /boot/grub/grub.cfg Step 12: Reboot sudo reboot now Facing the \u0026ldquo;grub rescue\u0026rdquo; prompt can be resolved using methods like insmod or a Live USB. Utilize the Arch Linux community, forums, and the Arch Wiki for support. Proactively addressing boot issues and leveraging resources ensures a stable system. Seek help or consult documentation for further assistance.\n","permalink":"http://localhost:1313/posts/grub-rescue-setup/","summary":"\u003ch1 id=\"understanding-grub-rescue-and-how-to-fix-it\"\u003eUnderstanding GRUB Rescue and How to Fix It\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003e(A Guide to Diagnosing and Resolving Boot Errors)\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eGRUB (Grand Unified Bootloader) is a critical component of Linux systems, responsible for loading the operating system. However, encountering the \u003cstrong\u003eGRUB rescue prompt\u003c/strong\u003e can be alarming. This blog explains why this happens and provides two practical methods to resolve it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"why-does-grub-rescue-appear\"\u003eWhy Does GRUB Rescue Appear?\u003c/h2\u003e\n\u003cp\u003eThe GRUB rescue prompt appears when the bootloader fails to locate critical files or configurations. Common causes include:\u003c/p\u003e","title":"Grub Rescue Setup"}]